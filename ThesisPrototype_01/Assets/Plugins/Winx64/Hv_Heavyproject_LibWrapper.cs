/**
 * Copyright (c) 2014,2015,2016 Enzien Audio Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIENAUDIO HEAVY COMPILER.
 */

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.Assertions;

[RequireComponent (typeof (AudioSource))]

public class Hv_Heavyproject_LibWrapper : MonoBehaviour {
  
  public float waveToggle = 1.0f;
  public float freq = 314.0f;

  // internal state
  private Hv_Heavyproject_Context _context;
  private float _waveToggle = 1.0f;
  private float _freq = 314.0f;

  private readonly object _bangQueueSync = new object();
  private Queue<string> _bangQueue = new Queue<string>();

  public void SendBangToReceiver(string receiverName) {
    lock(_bangQueueSync) {
      _bangQueue.Enqueue(receiverName);
    }
  }

  public void Awake() {
    _context = new Hv_Heavyproject_Context((double) AudioSettings.outputSampleRate);
  }

  public void Start() {
    _context.SendFloatToReceiver("waveToggle", Mathf.Clamp(waveToggle, 0.0f, 1.0f));
    _context.SendFloatToReceiver("freq", Mathf.Clamp(freq, 0.0f, 1000.0f));
  }
  
  private void OnValidate() {
    if (_context != null) {
      if (_waveToggle != waveToggle) {
        _waveToggle = waveToggle = Mathf.Clamp(waveToggle, 0.0f, 1.0f);
        _context.SendFloatToReceiver("waveToggle", _waveToggle);
      }
      if (_freq != freq) {
        _freq = freq = Mathf.Clamp(freq, 0.0f, 1000.0f);
        _context.SendFloatToReceiver("freq", _freq);
      }
    }
  }
 
  private void OnAudioFilterRead(float[] buffer, int numChannels) {
    Assert.AreEqual(numChannels, _context.GetNumOutputChannels()); // invalid channel configuration
    // process parameter changes
    OnValidate();

    // process all bang events
    lock (_bangQueueSync) {
      while (_bangQueue.Count != 0) {
        _context.SendBangToReceiver(_bangQueue.Dequeue());
      }
    }

    // process dsp
    _context.Process(buffer, buffer.Length / numChannels);
  }
}

class Hv_Heavyproject_Context {

  private IntPtr _context; // handle into unmanaged memory

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern IntPtr hv_HeavyProject_new_with_options(double sampleRate,
      int poolKb);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern void hv_HeavyProject_free(IntPtr ctx);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern double hv_getSampleRate(IntPtr ctx);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern int hv_getNumInputChannels(IntPtr ctx);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern int hv_getNumOutputChannels(IntPtr ctx);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern void hv_setPrintHook(IntPtr ctx, PrintHook printHook);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern void hv_sendBangToReceiver(IntPtr ctx, string receiverName);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern void hv_sendFloatToReceiver(IntPtr ctx,
      string receiverName, float x);

  [DllImport ("Hv_Heavyproject_LibWrapper")]
  private static extern int hv_HeavyProject_process_interleaved(IntPtr ctx,
      [In] float[] inBuffer, [Out] float[] outBuffer, int numSamples);

  private delegate void PrintHook(double timeStamp, string printName,
      string message, IntPtr userData);

  public Hv_Heavyproject_Context(double sampleRate, int poolKb=10) {
    _context = hv_HeavyProject_new_with_options(sampleRate, poolKb);

    PrintHook p = new PrintHook(OnPrint);
    hv_setPrintHook(_context, p);
  }

  ~Hv_Heavyproject_Context() {
    hv_HeavyProject_free(_context);
    GC.KeepAlive(_context);
  }

  public double GetSampleRate() {
    return hv_getSampleRate(_context);
  }

  public int GetNumInputChannels() {
    return hv_getNumInputChannels(_context);
  }

  public int GetNumOutputChannels() {
    return hv_getNumOutputChannels(_context);
  }

  public void SendBangToReceiver(string receiverName) {
    hv_sendBangToReceiver(_context, receiverName);
  }

  public void SendFloatToReceiver(string receiverName, float x) {
    hv_sendFloatToReceiver(_context, receiverName, x);
  }

  public int Process(float[] buffer, int numFrames) {
    return hv_HeavyProject_process_interleaved(_context, buffer, buffer, numFrames);
  }

  private void OnPrint(double timeStamp, string printName, string message,
      IntPtr userData) {
    Debug.Log(string.Format("{0} [{1:0.000}]: {2}", printName, timeStamp, message));
  }
 }